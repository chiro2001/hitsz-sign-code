{"version":3,"sources":["main.js","serviceWorker.js","index.js"],"names":["QRCode","require","check","room","result","toUpperCase","search","length","Main","props","React","useState","words","setWords","url","className","AppBar","Toolbar","id","Typography","variant","style","flexGrow","marginTop","Container","TextField","label","value","onChange","event","target","fullWidth","type","Button","size","color","disabled","borderRadius","width","onClick","console","log","window","open","height","IconButton","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6UAUMA,EAASC,EAAQ,IAGvB,SAASC,EAAMC,GAGb,IAAIC,GADJD,EAAOA,EAAKE,eACMC,OAAO,kDAEzB,OAAgB,IAAZF,GAAiBA,GAAUD,EAAKI,OAMvB,SAASC,EAAKC,GAC3B,IADkC,EAEVC,IAAMC,SAAS,IAFL,mBAE7BC,EAF6B,KAEtBC,EAFsB,KAI9BC,EAHO,4CAGMF,EAEjB,OACE,yBAAKG,UAAU,aACb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASC,GAAG,sBACV,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAO,CAAEC,SAAU,IAA5C,qDAOJ,yBAAKD,MAAO,CAAEE,UAAW,UAEzB,6BAEA,yBAAKR,UAAU,kBACb,kBAACS,EAAA,EAAD,CAAWT,UAAU,UACnB,kBAACU,EAAA,EAAD,CAAWP,GAAG,aAAaQ,MAAM,sDAAmBC,MAAOf,EAAOgB,SAAU,SAACC,GAC3EhB,EAASgB,EAAMC,OAAOH,QACrBI,WAAS,EAACC,KAAK,SAASZ,QAAQ,aACnC,6BAAM,6BACN,kBAACa,EAAA,EAAD,CACEb,QAAQ,YACRc,KAAK,QACLC,MAAM,UACNC,UAAWlC,EAAMU,GACjBS,MAAO,CAAEgB,aAAc,GAAIC,MAAO,QAClCC,QAAS,WACPC,QAAQC,IAAI,MAAO3B,GACnB0B,QAAQC,IAAI,SAAUvC,EAAMU,IAC5B8B,OAAOC,KAAK7B,EAAK,YAGnB,kBAAC,IAAD,CAAcO,MAAO,CAAEuB,OAAQ,GAAIN,MAAO,MAC1C,yDAEF,6BAAM,6BACN,kBAACnB,EAAA,EAAD,CAAYC,QAAQ,SAApB,4HAGA,6BAAM,6BACLlB,EAAMU,GAAS,6BACd,kBAACZ,EAAD,CAAQ2B,MAAOb,EAAKoB,KAAM,MAC1B,6BAAM,6BACN,kBAACT,EAAA,EAAD,CAAWP,GAAG,aAAaQ,MAAM,qEAAcK,WAAS,EAACX,QAAQ,aACjE,6BACA,8BACO,kBAACyB,EAAA,EAAD,KAAY,kBAAC,IAAD,CAAkBxB,MAAO,CAAEiB,MAAO,IAAKM,OAAQ,QACpE,kBAACzB,EAAA,EAAD,CAAYC,QAAQ,MAApB,4BAGA,6BACA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,MAApB,4BAGA,6BACA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,SAApB,wUAGA,6BAAM,6BACN,kBAACD,EAAA,EAAD,CAAYC,QAAQ,MAApB,wCAGA,6BACA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,SAApB,qRClFU0B,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC5C,EAAD,OAEF6C,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.68656847.chunk.js","sourcesContent":["import React from 'react'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from \"@material-ui/core/Button\"\r\nimport TextField from '@material-ui/core/TextField';\r\nimport TelegramIcon from '@material-ui/icons/Telegram';\r\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\r\nconst QRCode = require('qrcode.react');\r\n\r\n\r\nfunction check(room) {\r\n  // room = 'H308-1-1'\r\n  room = room.toUpperCase()\r\n  let result = room.search(/[AFGEKTHBCDL][0-9]{3,4}-[0-9]{1,2}-[0-9]{1,2}$/)\r\n  // console.log('room', room, 'result', result)\r\n  if (result !== -1 && result <= room.length)\r\n    return true\r\n  return false\r\n}\r\n\r\n\r\nexport default function Main(props) {\r\n  let base = 'http://sso.hitsz.edu.cn/auth/a/sign?code='\r\n  let [words, setWords] = React.useState('');\r\n\r\n  let url = base + words\r\n\r\n  return (\r\n    <div className=\"root-main\" >\r\n      <AppBar>\r\n        <Toolbar id=\"back-to-top-anchor\">\r\n          <Typography variant=\"h6\" style={{ flexGrow: 1 }}>\r\n            HITSZ座位二维码生成\r\n            </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      {/* 一个AppBar高度 */}\r\n      <div style={{ marginTop: 64 + 'px' }}></div>\r\n\r\n      <br />\r\n\r\n      <div className=\"container-main\">\r\n        <Container className=\"thread\">\r\n          <TextField id=\"search-box\" label=\"输入座位号，如 H308-7-1\" value={words} onChange={(event) => {\r\n            setWords(event.target.value)\r\n          }} fullWidth type=\"search\" variant=\"outlined\" />\r\n          <br /><br />\r\n          <Button\r\n            variant=\"contained\"\r\n            size=\"large\"\r\n            color=\"primary\"\r\n            disabled={!check(words)}\r\n            style={{ borderRadius: 90, width: '100%' }}\r\n            onClick={() => {\r\n              console.log(\"GO:\", url)\r\n              console.log('check:', check(words))\r\n              window.open(url, '_blank')\r\n            }}\r\n          >\r\n            <TelegramIcon style={{ height: 60, width: 60 }} />\r\n            <h2>点击签到</h2>\r\n          </Button>\r\n          <br /><br />\r\n          <Typography variant=\"body1\">\r\n            ↓或者截图保存这个二维码到微信扫描登录↓\r\n          </Typography>\r\n          <br /><br />\r\n          {check(words) ? <div>\r\n            <QRCode value={url} size={360} />\r\n            <br /><br />\r\n            <TextField id=\"search-box\" label=\"截图可以在此备注是哪科\" fullWidth variant=\"outlined\" />\r\n            <br />\r\n            <br />\r\n          </div> : <IconButton><RemoveCircleIcon style={{ width: 360, height: 360 }} /></IconButton>}\r\n          <Typography variant=\"h4\">\r\n            使用问题\r\n          </Typography>\r\n          <br />\r\n          <Typography variant=\"h6\">\r\n            怎么用？\r\n          </Typography>\r\n          <br />\r\n          <Typography variant=\"body1\">\r\n            先连接校内网，然后点击签到或者截图保存二维码到微信签到。如果微信已经绑定了统一认证系统则不需要再次输入信息。\r\n          </Typography>\r\n          <br /><br />\r\n          <Typography variant=\"h6\">\r\n            用了会怎样？\r\n          </Typography>\r\n          <br />\r\n          <Typography variant=\"body1\">\r\n            不会怎样，反正原来的座位号就是明文储存的。不过可能会有后来的人也扫了那个码而取代你的位置。\r\n          </Typography>\r\n        </Container>\r\n      </div>\r\n    </div>\r\n  )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Main from './main'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}